@article{754,
isbn = {9781504459242},
journal = {IEEE Std 754-2019 (Revision of IEEE 754-2008)},
pages = {1--84},
publisher = {IEEE},
title = {{754-2019 - IEEE Standard for Floating-Point Arithmetic}},
year = {2019}
}
@article{Gustafson2017,
abstract = {A new data type called a posit is designed as a direct drop-in replacement for IEEE Standard 754 floating-point numbers (floats). Unlike earlier forms of universal number (unum) arithmetic, posits do not require interval arithmetic or variable size operands; like floats, they round if an answer is inexact. However, they provide compelling advantages over floats, including larger dynamic range, higher accuracy, better closure, bitwise identical results across systems, simpler hardware, and simpler exception handling. Posits never overflow to infinity or underflow to zero, and "Nota- Number" (NaN) indicates an action instead of a bit pattern. A posit processing unit takes less circuitry than an IEEE float FPU. With lower power use and smaller silicon footprint, the posit operations per second (POPS) supported by a chip can be significantly higher than the FLOPS using similar hardware resources. GPU accelerators and Deep Learning processors, in particular, can do more per watt and per dollar with posits, yet deliver superior answer quality. A comprehensive series of benchmarks compares floats and posits for decimals of accuracy produced for a set precision. Low precision posits provide a better solution than "approximate computing" methods that try to tolerate decreased answer quality. High precision posits provide more correct decimals than floats of the same size; in some cases, a 32-bit posit may safely replace a 64-bit float. In other words, posits beat floats at their own game.},
author = {Gustafson, John L. and Yonemoto, Isaac},
doi = {10.14529/jsfi170206},
file = {:home/mhizzani/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/John L. Gustafson, Isaac Yonemoto - 2017 - Beating floating point at its own game Posit arithmetic.pdf:pdf},
issn = {2313-8734},
journal = {Supercomputing Frontiers and Innovations},
keywords = {Computer arithmetic,Energy-efficient computing,Floating point,LINPACK,Linear algebra,Neural networks,Posits,Unum computing,Valid arithmetic},
number = {2},
pages = {71--86},
publisher = {South Ural State University, Publishing Center},
title = {{Beating floating point at its own game: Posit arithmetic}},
url = {https://www.superfri.org/superfri/article/view/137},
volume = {4},
year = {2017}
}
@article{Miyashita2016,
abstract = {Recent advances in convolutional neural networks have considered model complexity and hardware efficiency to enable deployment onto embedded systems and mobile devices. For example, it is now well-known that the arithmetic operations of deep networks can be encoded down to 8-bit fixed-point without significant deterioration in performance. However, further reduction in precision down to as low as 3-bit fixed-point results in significant losses in performance. In this paper we propose a new data representation that enables state-of-the-art networks to be encoded to 3 bits with negligible loss in classification performance. To perform this, we take advantage of the fact that the weights and activations in a trained network naturally have non-uniform distributions. Using non-uniform, base-2 logarithmic representation to encode weights, communicate activations, and perform dot-products enables networks to 1) achieve higher classification accuracies than fixed-point at the same resolution and 2) eliminate bulky digital multipliers. Finally, we propose an end-to-end training procedure that uses log representation at 5-bits, which achieves higher final test accuracy than linear at 5-bits.},
archivePrefix = {arXiv},
arxivId = {1603.01025},
author = {Miyashita, Daisuke and Lee, Edward H. and Murmann, Boris},
eprint = {1603.01025},
file = {:home/mhizzani/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Miyashita, Lee, Murmann - 2016 - Convolutional Neural Networks using Logarithmic Data Representation.pdf:pdf},
month = {mar},
title = {{Convolutional Neural Networks using Logarithmic Data Representation}},
url = {http://arxiv.org/abs/1603.01025},
year = {2016}
}
@article{Samimi2020,
abstract = {In this article, a technique, based on using Residue Number System (RNS) is suggested to improve the energy efficiency of Deep Neural Networks (DNNs). In the DNN architecture, which is fully RNS-based, only weights and the primary inputs in the main memory are in the binary number system (BNS). The architecture, which is called Res-DNN, offers a high energy saving while requiring higher bit count for data to handle the overflow compared to that of a BNS one. Scaling techniques in the processing elements are employed in the RNS-based computations to make the computation bit widths the same as the BNS bit width. In this architecture, the MAX pooling and ReLU activation function are implemented in the RNS format. To lower the memory usage and required memory bandwidth, we suggest a Huffman-based coding. Additionally, for accessing the weights stored in the main memory, to obtain further energy reduction, we propose a structural modification to the memory hierarchy where a lower level register file is added to the data path of these accesses. The effectiveness of the proposed architecture is evaluated under seven state-of-the-art DNNs with the datasets of ImageNet and CIFAR-10. The obtained results show that Res-DNN leads to 2.5 Ã— lower energy for computations and an average of 30{\%} overall energy reduction compared to those of the binary counterpart.},
author = {Samimi, Nasim and Kamal, Mehdi and Afzali-Kusha, Ali and Pedram, Massoud},
doi = {10.1109/TCSI.2019.2951083},
issn = {1558-0806},
journal = {IEEE Transactions on Circuits and Systems I: Regular Papers},
keywords = {Residue number system,architecture,deep neural network,energy},
number = {2},
pages = {658--671},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Res-DNN: A residue number system-based DNN accelerator unit}},
volume = {67},
year = {2020}
}
